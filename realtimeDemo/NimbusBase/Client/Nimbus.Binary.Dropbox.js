// Generated by CoffeeScript 1.6.3
(function() {
  window.client = null;

  Nimbus.Client.Dropbox.Binary = {
    binary_setup: function() {
      return window.binary = Nimbus.Model.setup("binary", ["name", "path", "copied", "directlink", "sharelink", "expiration"]);
    },
    initialize_client: function() {
      log("initializing second client");
      if (Nimbus.Auth.key != null) {
        if (window.client == null) {
          window.client = new Dropbox.Client({
            key: Nimbus.Auth.key,
            secret: Nimbus.Auth.secret,
            sandbox: true
          });
          return window.client.oauth.setToken(localStorage["oauth_token"], localStorage["oauth_token_secret"]);
        } else {

        }
      } else {
        return log("can't upload file with no dropbox credentials");
      }
    },
    upload_blob: function(blob, name, callback) {
      var come_back, new_file;
      log("upload new blob");
      Nimbus.Client.Dropbox.Binary.initialize_client();
      if (window.client != null) {
        new_file = binary.create({
          name: name,
          copied: false
        });
        come_back = function(error, stat) {
          console.log("wrote file to cloud");
          console.log(error, stat);
          new_file.copied = true;
          new_file.path = stat.path;
          new_file.save();
          if (callback != null) {
            return callback(new_file);
          }
        };
        log("file name", name);
        return window.client.writeFile(name, blob, come_back);
      } else {
        return log("client won't initialize");
      }
    },
    upload_file: function(file, callback) {
      var come_back, new_file;
      log("upload new file");
      Nimbus.Client.Dropbox.Binary.initialize_client();
      if (window.client != null) {
        new_file = binary.create({
          name: file.name,
          copied: false
        });
        come_back = function(error, stat) {
          console.log("wrote file to cloud");
          console.log(error, stat);
          new_file.copied = true;
          new_file.path = stat.path;
          new_file.save();
          if (callback != null) {
            return callback(new_file);
          }
        };
        log("file name", file.name);
        return window.client.writeFile(file.name, file, come_back);
      } else {
        return log("client won't initialize");
      }
    },
    read_file: function(binary, callback) {
      var come_back;
      log("read a binary file from the server");
      Nimbus.Client.Dropbox.Binary.initialize_client();
      if (window.client != null) {
        come_back = function(error, data, stat) {
          console.log(error, data, stat);
          return callback(data);
        };
        return window.client.readFile(binary.path, {
          "blob": true
        }, come_back);
      } else {
        return log("client won't initialize");
      }
    },
    share_link: function(binary, callback) {
      var come_back;
      log("get the share link");
      Nimbus.Client.Dropbox.Binary.initialize_client();
      if (window.client != null) {
        come_back = function(error, data) {
          console.log(error, data);
          binary.sharelink = data.url;
          binary.save();
          return callback(data);
        };
        console.log(binary.path);
        return window.client.makeUrl(binary.path, {}, come_back);
      }
    },
    direct_link: function(binary, callback) {
      var come_back;
      log("get the share link");
      Nimbus.Client.Dropbox.Binary.initialize_client();
      if (window.client != null) {
        if ((binary.directlink != null) && new Date(binary.expiration) > new Date()) {
          return callback({
            "url": binary.directlink,
            "expiresAt": binary.expiration
          });
        } else {
          come_back = function(error, url) {
            console.log(error, url);
            binary.directlink = url.url;
            binary.expiration = url.expiresAt.toString();
            binary.save();
            return callback(url);
          };
          return window.client.makeUrl(binary.path, {
            'download': true,
            'downloadHack': true
          }, come_back);
        }
      }
    },
    delete_file: function(binary) {
      var come_back;
      log("delete file");
      Nimbus.Client.Dropbox.Binary.initialize_client();
      if (window.client != null) {
        come_back = function(error, stat) {
          return binary.destroy();
        };
        return window.client.remove(binary.path, come_back);
      } else {
        return log("client won't initialize");
      }
    }
  };

}).call(this);
