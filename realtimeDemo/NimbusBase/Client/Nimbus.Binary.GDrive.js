// Generated by CoffeeScript 1.6.3
Nimbus.Client.GDrive.Binary = {
  binary_setup: function() {
    return window.binary = Nimbus.Model.setup("binary", ["name", "path", "copied", "directlink", "sharelink", "expiration", "file_id"]);
  },
  initialize_client: function(run) {
    log("initializing client");
    if ((Nimbus.Auth.key != null) && (Nimbus.Auth.scope != null)) {
      if (!Nimbus.Client.GDrive.check_auth()) {
        return Nimbus.Client.GDrive.authorize(Nimbus.Auth.key, Nimbus.Auth.scope, function() {
          log("GDrive authorized");
          if (run) {
            return run();
          }
        });
      } else {
        if (run) {
          return run();
        }
      }
    } else {
      return log("can't upload file with no GDrive credentials");
    }
  },
  upload_blob: function(blob, name, callback) {
    return Nimbus.Client.GDrive.Binary.initialize_client(function() {
      var reader;
      log("upload new blob");
      reader = new FileReader();
      reader.readAsBinaryString(blob);
      return reader.onload = function() {
        var come_back, content, contentType, new_file, parent;
        content = reader.result;
        contentType = blob.type || 'application/octet-stream';
        parent = window.folder["binary_files"].id;
        new_file = binary.create({
          'name': name
        });
        come_back = function(file) {
          console.log("upload file to cloud");
          console.log(file);
          new_file.copied = true;
          new_file.file_id = file.id;
          new_file.directlink = file.webContentLink;
          new_file.save();
          if (callback != null) {
            return callback(new_file);
          }
        };
        return Nimbus.Client.GDrive.insertFile(content, name, contentType, parent, come_back);
      };
    });
  },
  upload_file: function(file, callback) {
    return Nimbus.Client.GDrive.Binary.initialize_client(function() {
      var reader;
      log("upload new file");
      reader = new FileReader();
      reader.readAsBinaryString(file);
      return reader.onload = function() {
        var come_back, content, contentType, name, new_file, parent;
        name = file.name;
        content = reader.result;
        contentType = file.type || 'application/octet-stream';
        parent = window.folder["binary_files"].id;
        new_file = binary.create({
          'name': name
        });
        come_back = function(file) {
          console.log("upload file to cloud");
          console.log(file);
          new_file.copied = true;
          new_file.file_id = file.id;
          new_file.directlink = file.webContentLink;
          new_file.save();
          new_file._file = file;
          if (callback != null) {
            return callback(new_file);
          }
        };
        return Nimbus.Client.GDrive.insertFile(content, name, contentType, parent, come_back);
      };
    });
  },
  read_file: function(binary, callback) {
    return Nimbus.Client.GDrive.Binary.initialize_client(function() {
      var param;
      log("read metadata of a file from the server");
      param = {
        path: "/drive/v2/files/" + binary.file_id
      };
      return Nimbus.Client.GDrive.make_request(param, function(data) {
        console.log(data);
        if (callback) {
          return callback(data);
        }
      });
    });
  },
  share_link: function(binary, callback) {
    return Nimbus.Client.GDrive.Binary.initialize_client(function() {
      log("get the share link");
      if (callback) {
        return callback("");
      }
    });
  },
  direct_link: function(binary, callback) {
    return Nimbus.Client.GDrive.Binary.initialize_client(function() {
      log("get the direct link");
      if (callback) {
        return callback(binary.directlink);
      }
    });
  },
  delete_file: function(binary) {
    return Nimbus.Client.GDrive.Binary.initialize_client(function() {
      log("delete file", binary);
      return Nimbus.Client.GDrive.deleteFile(binary.file_id, function() {
        return binary.destroy();
      });
    });
  }
};
