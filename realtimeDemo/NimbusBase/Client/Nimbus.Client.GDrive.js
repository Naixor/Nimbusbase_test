// Generated by CoffeeScript 1.6.3
(function() {
  Nimbus.Client.GDrive = {
    check_auth: function() {
      var token;
      log("checking if this is authenticated");
      if (location.protocol === "chrome-extension:") {
        if ((typeof gapi !== "undefined" && gapi !== null) && (gapi.auth != null) && gapi.auth.getToken() === null && (window.todo != null)) {
          token = Nimbus.Auth.GDrive.getLocalOauth2Token();
          if ((token == null) || Nimbus.Auth.GDrive.isTokenExpires(token)) {
            return false;
          } else {
            gapi.auth.setToken(token);
            return true;
          }
        }
      }
      return (typeof gapi !== "undefined" && gapi !== null) && (gapi.auth != null) && gapi.auth.getToken() !== null && Object.keys(gapi.auth.getToken()).length !== 0 && (window.todo != null);
    },
    authorize: function(client_id, scopes, callback) {
      log("authorized called");
      return gapi.auth.authorize({
        client_id: client_id,
        scope: scopes,
        immediate: false,
        authuser: localStorage.authuser || 0,
        prompt: 'select_account'
      }, callback);
    },
    insertFile: function(content, title, contentType, parent, callback) {
      var base64Data, boundary, close_delim, delimiter, metadata, multipartRequestBody, params;
      log("putFileContents");
      boundary = "-------314159265358979323846";
      delimiter = "\r\n--" + boundary + "\r\n";
      close_delim = "\r\n--" + boundary + "--";
      base64Data = btoa(content);
      metadata = {
        title: title,
        mimeType: contentType
      };
      if (parent != null) {
        metadata['parents'] = [
          {
            "kind": "drive#fileLink",
            "id": parent
          }
        ];
      }
      multipartRequestBody = delimiter + "Content-Type: application/json\r\n\r\n" + JSON.stringify(metadata) + delimiter + "Content-Type: " + contentType + "\r\n" + 'Content-Transfer-Encoding: base64\r\n' + "\r\n" + base64Data + close_delim;
      log("MULTI: ", multipartRequestBody);
      if (!callback) {
        callback = function(file) {
          return log("Update Complete ", file);
        };
      }
      params = {
        path: "/upload/drive/v2/files",
        method: "POST",
        params: {
          uploadType: "multipart"
        },
        headers: {
          "Content-Type": "multipart/mixed; boundary=\"" + boundary + "\""
        },
        body: multipartRequestBody
      };
      return this.make_request(params, callback);
    },
    deleteFile: function(file_id, callback) {
      var params,
        _this = this;
      log("deletePath");
      if (!callback) {
        callback = function(resp) {
          var params;
          params = {
            path: "/drive/v2/files/" + file_id,
            method: "DELETE"
          };
          _this.make_request(params, function(data) {
            return log("delete complete", data);
          });
          return log("Delete Complete ", resp);
        };
      }
      params = {
        path: "/drive/v2/files/" + file_id + "/trash",
        method: "POST"
      };
      return this.make_request(params, callback);
    },
    getFile: function(file_id, callback) {
      var params;
      log("getFileContents");
      if (!callback) {
        callback = function(resp) {
          return log("Read Complete ", resp);
        };
      }
      params = {
        path: "/drive/v2/files/" + file_id,
        method: "GET"
      };
      return this.make_request(params, callback);
    },
    readFile: function(url, callback) {
      var accessToken, xhr;
      if (!callback) {
        callback = function(resp) {
          return log("Read Complete ", resp);
        };
      }
      accessToken = gapi.auth.getToken().access_token;
      xhr = new XMLHttpRequest();
      xhr.open("GET", url);
      xhr.setRequestHeader("Authorization", "Bearer " + accessToken);
      xhr.onload = function() {
        callback(xhr.responseText);
        if (window.current_syncing != null) {
          return window.current_syncing.ok();
        }
      };
      xhr.onerror = function() {
        return callback(null);
      };
      if (window.current_syncing != null) {
        window.current_syncing.wait();
      }
      return xhr.send();
    },
    updateFile: function(content, title, contentType, file_id, folder_id, callback) {
      var base64Data, boundary, close_delim, delimiter, metadata, multipartRequestBody, params;
      log("updateFileContents");
      boundary = "-------314159265358979323846";
      delimiter = "\r\n--" + boundary + "\r\n";
      close_delim = "\r\n--" + boundary + "--";
      contentType = "text/html";
      metadata = {
        mimeType: contentType
      };
      base64Data = btoa(content);
      metadata = {
        title: title,
        mimeType: contentType
      };
      multipartRequestBody = delimiter + "Content-Type: application/json\r\n\r\n" + JSON.stringify(metadata) + delimiter + "Content-Type: " + contentType + "\r\n" + 'Content-Transfer-Encoding: base64\r\n' + "\r\n" + base64Data + close_delim;
      if (!callback) {
        callback = function(file) {
          return log("Update Complete ", file);
        };
      }
      params = {
        path: "/upload/drive/v2/files/" + file_id,
        method: "PUT",
        params: {
          fileId: file_id,
          uploadType: "multipart"
        },
        headers: {
          "Content-Type": "multipart/mixed; boundary=\"" + boundary + "\""
        },
        body: multipartRequestBody
      };
      return this.make_request(params, callback);
    },
    getMetadataList: function(query, callback) {
      var params;
      log("getMetadataList");
      if (!callback) {
        callback = function(file) {
          return log("List of files", file);
        };
      }
      params = {
        path: "/drive/v2/files",
        method: "GET",
        params: {
          q: query
        }
      };
      return this.make_request(params, callback);
    },
    make_request: function(params, callback) {
      params['callback'] = function(data) {
        if (callback != null) {
          callback(data);
        }
        if (window.current_syncing != null) {
          return window.current_syncing.ok();
        }
      };
      if (window.current_syncing != null) {
        window.current_syncing.wait();
      }
      return gapi.client.request(params);
    },
    get_current_user: function(callback) {
      var params, process,
        _this = this;
      log("get current user");
      process = function(file) {
        var user;
        log("About called ", file);
        user = {};
        user.name = file["user"].displayName;
        user.id = file["user"].permissionId;
        if (file["user"].picture != null) {
          user.pic = file["user"].picture.url;
        }
        if (callback != null) {
          return callback(user);
        }
      };
      params = {
        path: "/drive/v2/about",
        method: "GET"
      };
      return this.make_request(params, process);
    },
    get_current_user_info: function(callback) {
      var params, process,
        _this = this;
      log("get current user");
      process = function(user) {
        if (callback != null) {
          return callback(user);
        }
      };
      params = {
        path: "/plus/v1/people/me",
        method: "GET"
      };
      return this.make_request(params, process);
    },
    add_share_user: function(email, callback) {
      var app_folder_id, params, process,
        _this = this;
      log("&&& add share user");
      process = function(person) {
        var p;
        log("Add Share user Complete ", person);
        p = {
          id: person.id,
          name: person.name,
          role: person.role
        };
        if (person.photoLink != null) {
          p["pic"] = person.photoLink;
        }
        if (callback != null) {
          return callback(p);
        }
      };
      app_folder_id = window.folder['binary_files'].id;
      params = {
        path: "/drive/v2/files/" + app_folder_id + "/permissions",
        method: "POST",
        params: {
          fileId: app_folder_id
        },
        body: {
          role: "writer",
          type: "user",
          value: email
        }
      };
      return this.make_request(params, process);
    },
    add_share_user_real: function(email, callback, file_id) {
      var fid, params, process,
        _this = this;
      log("&&& add share user");
      fid = file_id ? file_id : window.c_file.id;
      process = function(person) {
        var p;
        log("Add Share user Complete ", person);
        p = {
          id: person.id,
          name: person.name,
          role: person.role
        };
        if (person.photoLink != null) {
          p["pic"] = person.photoLink;
        }
        if (callback != null) {
          return callback(p);
        }
      };
      params = {
        path: "/drive/v2/files/" + fid + "/permissions",
        method: "POST",
        params: {
          fileId: fid
        },
        body: {
          role: "writer",
          type: "user",
          value: email
        }
      };
      return this.make_request(params, process);
    },
    remove_share_user: function(id, callback) {
      var app_folder_id, params;
      log("&&& remove a user from sharing this app");
      app_folder_id = window.folder['binary_files'].id;
      if (!callback) {
        callback = function(file) {
          return log("Permission Removal Complete ", file);
        };
      }
      params = {
        path: "/drive/v2/files/" + app_folder_id + "/permissions/" + id,
        method: "DELETE"
      };
      return this.make_request(params, callback);
    },
    remove_share_user_real: function(id, callback, file_id) {
      var params;
      log("&&& remove a user from sharing this app");
      if (!callback) {
        callback = function(file) {
          return log("Permission Removal Complete ", file);
        };
      }
      file_id = file_id ? file_id : window.c_file.id;
      params = {
        path: "/drive/v2/files/" + file_id + "/permissions/" + id,
        method: "DELETE"
      };
      return this.make_request(params, callback);
    },
    get_user_email: function() {
      var access_token, data, xhr;
      if (window.user_email != null) {
        return window.user_email;
      }
      access_token = gapi.auth.getToken().access_token;
      data = null;
      xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            return data = JSON.parse(xhr.responseText);
          } else {
            return log("get user email failed with status " + xhr.status);
          }
        }
      };
      xhr.open("GET", "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + access_token, false);
      xhr.send(null);
      if ((data != null ? data.email : void 0) != null) {
        window.user_email = data.email;
        return data.email;
      }
      return null;
    },
    get_shared_users_real: function(callback) {
      var params, process,
        _this = this;
      log("&&& get shared users");
      process = function(file) {
        var p, perm, permissions, _i, _len, _ref;
        log("Update Complete ", file);
        permissions = [];
        _ref = file.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          perm = {
            id: p.id,
            name: p.name,
            role: p.role
          };
          if (p.photoLink != null) {
            perm["pic"] = p.photoLink;
          }
          permissions.push(perm);
        }
        log("permissions", permissions);
        if (callback != null) {
          return callback(permissions);
        }
      };
      params = {
        path: "/drive/v2/files/" + window.c_file.id + "/permissions",
        method: "GET"
      };
      return this.make_request(params, process);
    },
    get_shared_users: function(callback) {
      var app_folder_id, params, process,
        _this = this;
      log("&&& get shared users");
      app_folder_id = window.folder['binary_files'].id;
      process = function(file) {
        var p, perm, permissions, _i, _len, _ref;
        log("Update Complete ", file);
        permissions = [];
        _ref = file.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          perm = {
            id: p.id,
            name: p.name,
            role: p.role
          };
          if (p.photoLink != null) {
            perm["pic"] = p.photoLink;
          }
          permissions.push(perm);
        }
        log("permissions", permissions);
        if (callback != null) {
          return callback(permissions);
        }
      };
      params = {
        path: "/drive/v2/files/" + app_folder_id + "/permissions",
        method: "GET"
      };
      return this.make_request(params, process);
    },
    get_app_folders: function(callback) {
      log("&&& get app folders");
      return Nimbus.Client.GDrive.getMetadataList("mimeType = 'application/vnd.google-apps.folder' and title = '" + Nimbus.Auth.app_name + "'", function(data) {
        var f, folders, s, spaces, _i, _len;
        log(data);
        folders = data.items;
        spaces = [];
        if (data.items != null) {
          for (_i = 0, _len = folders.length; _i < _len; _i++) {
            f = folders[_i];
            s = {};
            s.id = f.id;
            s.owner = f.ownerNames[0];
            spaces.push(s);
          }
        }
        log(spaces);
        if (callback != null) {
          return callback(spaces);
        }
      });
    },
    switch_to_app_folder: function(id, callback) {
      var _this = this;
      log("###switch to app folder");
      window.folder = {};
      window.folder[Nimbus.Auth.app_name] = {
        "title": Nimbus.Auth.app_name,
        "id": id
      };
      window.current_syncing = new DelayedOp(function() {
        if (callback != null) {
          return callback();
        }
      });
      localStorage["main_folder_id"] = id;
      Nimbus.Client.GDrive.getMetadataList("mimeType = 'application/vnd.google-apps.folder'", function(data) {
        var a, k, v, x, _i, _len, _ref, _results;
        a = data.items;
        log("###rewriting folders", a);
        for (_i = 0, _len = a.length; _i < _len; _i++) {
          x = a[_i];
          log(x);
          if (x.parents.length > 0 && (x.parents[0].id === id)) {
            window.folder[x.title] = x;
          }
        }
        if (Nimbus.dictModel != null) {
          _ref = Nimbus.dictModel;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(v.records = {});
          }
          return _results;
        }
      });
      return window.current_syncing.ready();
    },
    switch_to_app_file_real: function(id, callback) {
      var _this = this;
      window.current_syncing = new DelayedOp(function() {
        if (callback != null) {
          return callback();
        }
      });
      Nimbus.Share.getFile(id, function(data) {
        var k, v, _ref;
        if (!data.id) {
          return;
        }
        window.c_file = data;
        if (Nimbus.dictModel != null) {
          _ref = Nimbus.dictModel;
          for (k in _ref) {
            v = _ref[k];
            v.records = {};
          }
        }
        return gapi.drive.realtime.load(id, onFileLoaded, initializeModel, handleErrors);
      });
      return window.current_syncing.ready();
    },
    build_params: function(obj) {
      var k, params_arr, v;
      params_arr = (function() {
        var _results;
        _results = [];
        for (k in obj) {
          v = obj[k];
          _results.push("" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(v)));
        }
        return _results;
      })();
      return params_arr.join("&");
    },
    extract_params_from_url: function() {
      var m, params, queryString, regex;
      params = {};
      queryString = location.hash.substring(1);
      regex = /([^&=]+)=([^&]*)/g;
      while (m = regex.exec(queryString)) {
        params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);
      }
      return params;
    },
    request_access_token: function() {
      var params, params_str, redirect_uri, url;
      redirect_uri = Nimbus.Auth.redirect_uri || window.location.protocol + '//' + window.location.host + window.location.pathname;
      params = {
        response_type: "token",
        client_id: Nimbus.Auth.key,
        'redirect_uri': redirect_uri,
        scope: Nimbus.Auth.scope,
        state: "gdrive_get_access_token",
        approval_prompt: "force"
      };
      params_str = Nimbus.Client.GDrive.build_params(params);
      url = "https://accounts.google.com/o/oauth2/auth?" + params_str;
      return window.open(url, "_self");
    },
    request_validate_token: function(token) {
      var data, xhr;
      xhr = new XMLHttpRequest();
      data = null;
      xhr.onreadystatechange = function() {
        var _ref;
        if (xhr.readyState === 4) {
          if ((_ref = xhr.status) === 200 || _ref === 400) {
            return data = JSON.parse(xhr.responseText);
          } else {
            return log("validate access token failed with status " + xhr.status);
          }
        }
      };
      xhr.open("GET", "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + token, false);
      xhr.send(null);
      return data;
    },
    is_token_validate: function(token) {
      var data, result;
      result = false;
      data = this.request_validate_token(token);
      if (data == null) {
        return false;
      }
      if (!("error" in data) && (data != null ? data.audience : void 0) === Nimbus.Auth.key) {
        result = true;
      }
      return result;
    },
    handle_auth_redirected: function() {
      return typeof history.replaceState === "function" ? history.replaceState("", document.title, window.location.pathname) : void 0;
    },
    is_auth_redirected: function() {
      var params;
      params = this.extract_params_from_url();
      if (params.state === "gdrive_get_access_token" && "token_type" in params && params.token_type === "Bearer") {
        if (params.authuser) {
          localStorage.authuser = params.authuser;
        }
        return true;
      }
      return false;
    }
  };

}).call(this);
