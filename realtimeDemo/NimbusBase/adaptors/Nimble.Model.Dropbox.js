// Generated by CoffeeScript 1.6.3
(function() {
  Nimbus.Model.Dropbox = {
    cloudcache: {},
    last_hash: "",
    hash: "",
    toCloudStructure: function(object) {
      log("local to cloud structure");
      return JSON.stringify(object);
    },
    fromCloudStructure: function(value) {
      log("changes cloud to local data in the form a dictionary");
      return value;
    },
    diff_objects: function(previous, current) {
      var diff, f, v;
      diff = {};
      for (f in previous) {
        v = previous[f];
        if (current[f] !== previous[f]) {
          diff[f] = [current[f], previous[f]];
        }
      }
      if ((previous["parent_id"] != null) !== (current["parent_id"] != null)) {
        diff["parent_id"] = ["one of them is null"];
      }
      return diff;
    },
    add_to_cloud: function(object, callback) {
      log("add to cloud", object.name);
      return Nimbus.Client.Dropbox.putFileContents(("/" + Nimbus.Auth.app_name) + ("/" + this.name + "/" + object.id + ".txt"), this.toCloudStructure(object), function(resp) {
        log(object.name, "finished being added to cloud");
        log("resp", resp);
        window.currently_syncing = true;
        object.time = resp.modified;
        object.synced = true;
        object.save();
        window.currently_syncing = false;
        if (callback != null) {
          return callback(resp);
        }
      });
    },
    delete_from_cloud: function(object_id, callback) {
      log("delete from cloud", object_id);
      log("delete route", ("/" + Nimbus.Auth.app_name) + ("/" + this.name + "/" + object_id + ".txt"));
      return Nimbus.Client.Dropbox.deletePath(("/" + Nimbus.Auth.app_name) + ("/" + this.name + "/" + object_id + ".txt"), function() {
        log("finished delete from cloud", object_id);
        if (callback != null) {
          return callback();
        }
      });
    },
    update_to_cloud: function(object, callback) {
      log("updated to cloud", object.name);
      return Nimbus.Client.Dropbox.putFileContents(("/" + Nimbus.Auth.app_name) + ("/" + this.name + "/" + object.id + ".txt"), this.toCloudStructure(object), function(resp) {
        log(object.name, "finished being updated to cloud");
        window.currently_syncing = true;
        object.time = resp.modified;
        object.synced = true;
        object.save();
        window.currently_syncing = false;
        if (callback != null) {
          return callback(resp);
        }
      });
    },
    add_from_cloud: function(object_id, callback) {
      var _this = this;
      log("add from cloud", object_id);
      return Nimbus.Client.Dropbox.getFileContents(("/" + Nimbus.Auth.app_name) + ("/" + this.name + "/" + object_id + ".txt"), function(data) {
        var converted, x;
        log("cloud read data", data);
        window.currently_syncing = true;
        converted = _this.fromCloudStructure(data);
        x = _this.init(converted);
        x.synced = true;
        x.time = _this.cloudcache[object_id].time;
        x.save();
        window.currently_syncing = false;
        if (callback != null) {
          return callback(data);
        }
      });
    },
    update_to_local: function(object, callback) {
      var _this = this;
      log("update to local", object.name);
      return Nimbus.Client.Dropbox.getFileContents(("/" + Nimbus.Auth.app_name) + ("/" + this.name + "/" + object.id + ".txt"), function(data) {
        var converted, x;
        log("cloud read data", data);
        window.currently_syncing = true;
        converted = _this.fromCloudStructure(data);
        x = _this.find(object.id);
        converted.time = _this.cloudcache[object.id].time;
        x.updateAttributes(converted);
        return window.currently_syncing = false;
      });
    },
    sync_all: function(cb) {
      var _this = this;
      log("syncs all the data, normally happens at the start of a program or coming back from offline");
      window.current_syncing = new DelayedOp(function() {
        log("call back sync called");
        window.current_syncing = new DelayedOp(function() {
          window.current_syncing = null;
          if (cb != null) {
            return cb();
          }
        });
        _this.sync_model_base_algo();
        return window.current_syncing.ready();
      });
      this.load_all_from_cloud();
      return window.current_syncing.ready();
    },
    load_all_from_cloud: function() {
      var error,
        _this = this;
      log("loads all the data from the cloud locally, probably not feasible with dropbox and changes need to happen");
      this.cloudcache = {};
      try {
        return Nimbus.Client.Dropbox.getMetadataList("/" + Nimbus.Auth.app_name + "/" + this.name, function(data) {
          var id, title, x, _i, _len, _ref;
          log("call back load called");
          log("data", data);
          _ref = data.contents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            title = x.path;
            id = title.replace(("/" + Nimbus.Auth.app_name + "/") + ("" + _this.name + "/"), "").replace(".txt", "");
            _this.cloudcache[id] = {
              id: id,
              time: x.modified
            };
          }
          return _this.is_cloud_available = true;
        }, function(error) {
          console.log("ERROR: error called for metadataList, folder should be created");
          _this.is_cloud_available = false;
          Nimbus.Client.Dropbox.createFolder("/" + Nimbus.Auth.app_name + "/" + _this.name, function(data) {
            return log("call back create folder called", data);
          });
          return _this.cloudcache = {};
        });
      } catch (_error) {
        error = _error;
        _this.is_cloud_available = false;
        return log("trying to get the folder failed, probably cuz it don't exist", error);
      }
    },
    get_delta: function() {
      return log("get the delta for ", this.name, " since last synced");
    },
    extended: function() {
      this.sync(this.proxy(this.real_time_sync));
      return this.fetch(this.proxy(this.loadLocal));
    }
  };

}).call(this);
