// Generated by CoffeeScript 1.6.3
(function() {
  window.nimbus_error = [];

  Nimbus.Model.GDrive = {
    cloudcache: {},
    last_hash: "",
    hash: "",
    toCloudStructure: function(object) {
      log("local to cloud structure");
      return JSON.stringify(object);
    },
    fromCloudStructure: function(value) {
      log("changes cloud to local data in the form a dictionary");
      return JSON.parse(value);
    },
    diff_objects: function(previous, current) {
      var diff, f, v;
      diff = {};
      for (f in previous) {
        v = previous[f];
        if (current[f] !== previous[f]) {
          diff[f] = [current[f], previous[f]];
        }
      }
      if ((previous["parent_id"] != null) !== (current["parent_id"] != null)) {
        diff["parent_id"] = ["one of them is null"];
      }
      return diff;
    },
    add_to_cloud: function(object, callback) {
      var parent, parent_name;
      log("add to cloud", object);
      parent_name = object.parent.name;
      parent = window.folder[parent_name].id;
      return Nimbus.Client.GDrive.insertFile(this.toCloudStructure(object), object.id, "text/plain", parent, function(data) {
        log("logging data inserted", data);
        window.currently_syncing = true;
        object.gid = data.id;
        object.time = data.modifiedDate;
        object.synced = true;
        object.save();
        return window.currently_syncing = false;
      });
    },
    delete_from_cloud: function(object_id, callback) {
      log("delete from cloud", object_id);
      return Nimbus.Client.GDrive.getMetadataList("title = '" + object_id + "'", function(data) {
        var id;
        log("data", data);
        if (data.items.length > 0) {
          id = data.items[0].id;
          Nimbus.Client.GDrive.deleteFile(id);
          if (callback != null) {
            return callback();
          }
        } else {
          return log("file to be deleted not there");
        }
      });
    },
    update_to_cloud: function(object, callback) {
      var comeback, parent, parent_name, update_comback,
        _this = this;
      log("updated to cloud", object.name);
      parent_name = object.parent.name;
      parent = window.folder[parent_name].id;
      update_comback = function(data) {
        log("logging data inserted", data);
        window.currently_syncing = true;
        object.time = data.modifiedDate;
        object.save();
        object.synced = true;
        return window.currently_syncing = false;
      };
      comeback = function(data) {
        var id;
        id = data.items[0].id;
        return Nimbus.Client.GDrive.updateFile(_this.toCloudStructure(object), object.id, "text/plain", id, parent, function(data) {
          log("logging data inserted", data);
          window.currently_syncing = true;
          object.time = data.modifiedDate;
          object.save();
          return window.currently_syncing = false;
        });
      };
      if (object.gid != null) {
        return Nimbus.Client.GDrive.updateFile(this.toCloudStructure(object), object.id, "text/plain", object.gid, parent, function(data) {
          log("logging data updated", data);
          window.currently_syncing = true;
          object.time = data.modifiedDate;
          object.save();
          return window.currently_syncing = false;
        });
      } else {
        return Nimbus.Client.GDrive.getMetadataList("title = '" + object.id + "'", comeback);
      }
    },
    add_from_cloud: function(object_id, callback) {
      var process_data,
        _this = this;
      log("add from cloud GDrive", object_id);
      process_data = function(data) {
        var converted, x;
        log("cloud url data", JSON.parse(data));
        window.currently_syncing = true;
        converted = _this.fromCloudStructure(data);
        x = _this.init(converted);
        x.synced = true;
        x.time = _this.cloudcache[object_id].time;
        x.save();
        return window.currently_syncing = false;
      };
      return Nimbus.Client.GDrive.getMetadataList("title = '" + object_id + "'", function(data) {
        var url;
        log("cloud read data", data);
        window.data = data;
        if ((data.items != null) && data.items.length >= 1) {
          url = window.data.items[0].downloadUrl;
          return Nimbus.Client.GDrive.readFile(url, process_data);
        } else {
          return log("This data is not there");
        }
      });
    },
    update_to_local: function(object, callback) {
      var process_data,
        _this = this;
      log("update to local", object);
      process_data = function(data) {
        var converted, x;
        log("cloud url data", JSON.parse(data));
        window.currently_syncing = true;
        converted = _this.fromCloudStructure(data);
        x = _this.find(object.id);
        converted.time = _this.cloudcache[object.id].time;
        x.updateAttributes(converted);
        return window.currently_syncing = false;
      };
      return Nimbus.Client.GDrive.getMetadataList("title = '" + object.id + "'", function(data) {
        var url;
        log("cloud read data", data);
        window.data = data;
        if (data.error != null) {
          window.nimbus_error.push({
            error: data.error,
            object: object
          });
          return console.log("##ERROR writing back to local", data.error, "object: ", object);
        } else {
          if (data.items.length >= 1) {
            url = window.data.items[0].downloadUrl;
            return Nimbus.Client.GDrive.readFile(url, process_data);
          } else {
            return log("This data is not there");
          }
        }
      });
    },
    sync_all: function(cb) {
      var _this = this;
      log("syncs all the data, normally happens at the start of a program or coming back from offline");
      window.current_syncing = new DelayedOp(function() {
        log("call back sync called");
        window.current_syncing = new DelayedOp(function() {
          window.current_syncing = null;
          if (cb != null) {
            return cb();
          }
        });
        _this.sync_model_base_algo();
        return window.current_syncing.ready();
      });
      this.load_all_from_cloud();
      return window.current_syncing.ready();
    },
    load_all_from_cloud: function() {
      var fill_cache, folder_id, object_name,
        _this = this;
      log("loads all the data from the cloud locally");
      this.cloudcache = {};
      object_name = this.name;
      log("object name", object_name);
      if ((window.folder != null) && (window.folder[object_name] != null)) {
        folder_id = window.folder[object_name].id;
        fill_cache = function(data) {
          var x, _i, _len, _ref, _results;
          log("cloud read data", object_name, data);
          window.data = data;
          if (data.items != null) {
            _ref = data.items;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              x = _ref[_i];
              _this.cloudcache[x.title] = {
                id: x.title,
                time: x.modifiedDate
              };
              if (x.labels.trashed) {
                _results.push(console.log("##### this is trashed #####", x));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            return log("###ERROR, no return data");
          }
        };
        Nimbus.Client.GDrive.getMetadataList("'" + folder_id + "' in parents", fill_cache);
        return _this.is_cloud_available = true;
      } else {
        log("############################BIG ERROR no folder there for load from cloud");
        return _this.is_cloud_available = false;
      }
    },
    get_delta: function() {
      return log("get the delta for ", this.name, " since last synced");
    },
    extended: function() {
      this.sync(this.proxy(this.real_time_sync));
      return this.fetch(this.proxy(this.loadLocal));
    }
  };

  window.folder = null;

  window.folder_creation = new OneOp();

  window.creating = {};

  window.handle_initialization = new OneOp();

  window.gdrive_initialized = false;

  window.folder_initialize = function(callback) {
    log("&&& folder initialize");
    log("Nimbus.Client.GDrive.check_auth()", Nimbus.Client.GDrive.check_auth(), "Nimbus.Auth.service", Nimbus.Auth.service);
    if (Nimbus.Client.GDrive.check_auth() && Nimbus.Auth.service === 'GDrive') {
      log("this is authenticated and a GDrive app");
      return Nimbus.Client.GDrive.getMetadataList("mimeType = 'application/vnd.google-apps.folder'", function(data) {
        var a, x, _i, _len;
        log("#data: ", data);
        window.folder = {};
        a = data.items;
        if (localStorage["main_folder_id"] != null) {
          return window.folder[Nimbus.Auth.app_name] = {
            "title": Nimbus.Auth.app_name,
            "id": localStorage["main_folder_id"]
          };
        } else {
          for (_i = 0, _len = a.length; _i < _len; _i++) {
            x = a[_i];
            if (x.title === c_file.id && x.owners[0].permissionId === c_file.owners[0].permissionId) {
              window.folder.binary_files = x;
            }
          }
          if (window.folder["binary_files"] == null) {
            return Nimbus.Client.GDrive.insertFile("", c_file.id, "application/vnd.google-apps.folder", null, function(data) {
              log("binary_files folder data", data);
              log("binary ready callback", binary_ready_callback);
              window.folder['binary_files'] = data;
              if (window.binary_ready_callback) {
                window.binary_ready_callback();
              }
              if (callback != null) {
                return callback();
              }
            });
          } else {
            log("binary ready callback", binary_ready_callback);
            if (window.binary_ready_callback) {
              window.binary_ready_callback();
            }
            if (callback != null) {
              return callback();
            }
          }
        }
      });
    }
  };

}).call(this);
