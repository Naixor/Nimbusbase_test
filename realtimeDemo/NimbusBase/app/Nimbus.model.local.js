// Generated by CoffeeScript 1.6.3
(function() {
  Nimbus.Model.Local = {
    classname: "Nimbus.Model.Local",
    extended: function() {
      this.sync(this.proxy(this.saveLocal));
      return this.fetch(this.proxy(this.loadLocal));
    },
    saveLocal: function(record, method) {
      var db, result, self, _data, _i, _len, _ref;
      if (!window._indexdb && Nimbus.Auth.app_name) {
        window._indexdb = new PouchDB(Nimbus.Auth.app_name);
      }
      if (!window._indexdb) {
        result = JSON.stringify(this);
        localStorage[this.name] = result;
        return;
      }
      db = window._indexdb;
      self = this;
      if (record) {
        _data = {
          _id: record.id,
          type: this.name,
          data: JSON.stringify(record)
        };
        db.get(record.id, function(err, res) {
          if (!err) {
            return db.remove(res, function(e, r) {
              if (method === 'destroy') {
                return;
              }
              return db.put(_data);
            });
          } else {
            return db.put(_data);
          }
        });
      } else {
        _ref = this.records;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          record = _ref[_i];
          _data = {
            _id: key,
            type: this.name,
            data: JSON.stringify(record)
          };
          db.get(key, function(err, res) {
            if (!err) {
              _data._rev = res._rev;
            }
            return db.put(_data);
          });
        }
      }
    },
    loadLocal: function(callback) {
      var db, result, self;
      if (!window._indexdb && Nimbus.Auth.app_name) {
        window._indexdb = new PouchDB(Nimbus.Auth.app_name);
      }
      if (!window._indexdb) {
        result = localStorage[this.name];
        if (!result) {
          return;
        }
        result = JSON.parse(result);
        this.refresh(result);
        return;
      }
      self = this;
      db = window._indexdb;
      db.allDocs({
        include_docs: true
      }, function(err, response) {
        var doc, one, rows, _i, _len;
        if (!err) {
          rows = response.rows;
          result = [];
          for (_i = 0, _len = rows.length; _i < _len; _i++) {
            one = rows[_i];
            doc = one.doc;
            if (doc['type'] === self.name) {
              result.push(JSON.parse(doc.data));
            }
          }
          self.refresh(result);
          if (callback != null) {
            return callback();
          }
        }
      });
    }
  };

}).call(this);
