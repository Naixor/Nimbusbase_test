// Generated by CoffeeScript 1.6.3
(function() {
  var DelayedOp, DelayedSyncAnimation, OneOp, exports,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  DelayedOp = (function() {
    function DelayedOp(callback) {
      this.callback = callback;
      this.ready = __bind(this.ready, this);
      this.ok = __bind(this.ok, this);
      this.wait = __bind(this.wait, this);
      this.count = 1;
    }

    DelayedOp.prototype.wait = function() {
      return this.count++;
    };

    DelayedOp.prototype.ok = function() {
      if (!--this.count) {
        return this.callback();
      }
    };

    DelayedOp.prototype.ready = function() {
      return this.ok();
    };

    return DelayedOp;

  })();

  OneOp = (function() {
    function OneOp() {
      this.execute_callback = __bind(this.execute_callback, this);
      this.add_last_call = __bind(this.add_last_call, this);
      this.add_call = __bind(this.add_call, this);
      this.running = false;
      this.callbacks = [];
    }

    OneOp.prototype.add_call = function(callback) {
      this.running = true;
      return this.callbacks.push(callback);
    };

    OneOp.prototype.add_last_call = function(callback) {
      return this.last_callback = callback;
    };

    OneOp.prototype.execute_callback = function() {
      var func, _i, _len, _ref;
      _ref = this.callbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        func = _ref[_i];
        func();
      }
      this.callbacks = [];
      if (this.last_callback != null) {
        this.last_callback();
      }
      return this.running = false;
    };

    return OneOp;

  })();

  DelayedSyncAnimation = (function() {
    function DelayedSyncAnimation() {
      this.ready = __bind(this.ready, this);
      this.ok = __bind(this.ok, this);
      this.wait = __bind(this.wait, this);
      this.count = 1;
    }

    DelayedSyncAnimation.prototype.wait = function() {
      return this.count++;
    };

    DelayedSyncAnimation.prototype.ok = function() {
      if (!--this.count) {
        return log("ok executed");
      }
    };

    DelayedSyncAnimation.prototype.ready = function() {
      return this.ok();
    };

    return DelayedSyncAnimation;

  })();

  exports = this;

  exports.DelayedOp = DelayedOp;

  exports.OneOp = OneOp;

  exports.DelayedSyncAnimation = DelayedSyncAnimation;

  window.debug = false;

  window.log = function() {
    var stuff;
    stuff = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (window.debug) {
      return console.log(stuff);
    }
  };

}).call(this);
