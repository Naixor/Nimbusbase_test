// Generated by CoffeeScript 1.6.3
(function() {
  var DropboxClient;

  Dropbox.Client = (function() {
    function Client(options) {
      this.sandbox = options.sandbox || false;
      this.apiServer = options.server || this.defaultApiServer();
      this.authServer = options.authServer || this.defaultAuthServer();
      this.fileServer = options.fileServer || this.defaultFileServer();
      this.oauth = new DropboxOauth(options);
      this.uid = null;
      this.authState = null;
      this.authError = null;
      this._credentials = null;
      this.setCredentials(options);
      this.setupUrls();
    }

    Client.prototype.authDriver = function(driver) {
      this.driver = driver;
      return this;
    };

    Client.prototype.dropboxUid = function() {
      return this.uid;
    };

    Client.prototype.credentials = function() {
      if (!this._credentials) {
        this.computeCredentials();
      }
      return this._credentials;
    };

    Client.prototype.authenticate = function(callback) {
      var oldAuthState, _fsmStep,
        _this = this;
      oldAuthState = null;
      _fsmStep = function() {
        var authUrl;
        if (oldAuthState !== _this.authState) {
          oldAuthState = _this.authState;
          if (_this.driver.onAuthStateChange) {
            return _this.driver.onAuthStateChange(_this, _fsmStep);
          }
        }
        switch (_this.authState) {
          case DropboxClient.RESET:
            return _this.requestToken(function(error, data) {
              var token, tokenSecret;
              if (error) {
                _this.authError = error;
                _this.authState = DropboxClient.ERROR;
              } else {
                token = data.oauth_token;
                tokenSecret = data.oauth_token_secret;
                _this.oauth.setToken(token, tokenSecret);
                _this.authState = DropboxClient.REQUEST;
              }
              _this._credentials = null;
              return _fsmStep();
            });
          case DropboxClient.REQUEST:
            authUrl = _this.authorizeUrl(_this.oauth.token);
            return _this.driver.doAuthorize(authUrl, _this.oauth.token, _this.oauth.tokenSecret, function() {
              _this.authState = DropboxClient.AUTHORIZED;
              _this._credentials = null;
              return _fsmStep();
            });
          case DropboxClient.AUTHORIZED:
            return _this.getAccessToken(function(error, data) {
              if (error) {
                _this.authError = error;
                _this.authState = DropboxClient.ERROR;
              } else {
                _this.oauth.setToken(data.oauth_token, data.oauth_token_secret);
                _this.uid = data.uid;
                _this.authState = DropboxClient.DONE;
              }
              _this._credentials = null;
              return _fsmStep();
            });
          case DropboxClient.DONE:
            return callback(null, _this);
          case Dropbox.SIGNED_OFF:
            _this.reset();
            return _fsmStep();
          case DropboxClient.ERROR:
            return callback(_this.authError);
        }
      };
      _fsmStep();
      return this;
    };

    Client.prototype.signOut = function(callback) {
      var params, url,
        _this = this;
      url = this.urls.signOut;
      params = this.oauth.addAuthParams('POST', url, {});
      return Dropbox.Xhr.request('POST', url, params, null, function(error) {
        if (error) {
          return callback(error);
        }
        _this.reset();
        _this.authState = DropboxClient.SIGNED_OFF;
        if (_this.driver.onAuthStateChange) {
          return _this.driver.onAuthStateChange(_this, function() {
            return callback(error);
          });
        } else {
          return callback(error);
        }
      });
    };

    Client.prototype.signOff = function(callback) {
      return this.signOut(callback);
    };

    Client.prototype.getUserInfo = function(callback) {
      var params, url;
      url = this.urls.accountInfo;
      params = this.oauth.addAuthParams('GET', url, {});
      return Dropbox.Xhr.request('GET', url, params, null, function(error, userData) {
        return callback(error, Dropbox.UserInfo.parse(userData), userData);
      });
    };

    Client.prototype.readFile = function(path, options, callback) {
      var params, responseType, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      url = "" + this.urls.getFile + "/" + (this.urlEncodePath(path));
      params = {};
      responseType = null;
      if (options) {
        if (options.versionTag) {
          params.rev = options.versionTag;
        } else if (options.rev) {
          params.rev = options.rev;
        }
        if (options.blob) {
          responseType = 'blob';
        }
        if (options.binary) {
          responseType = 'b';
        }
      }
      this.oauth.addAuthParams('GET', url, params);
      return Dropbox.Xhr.request2('GET', url, params, null, null, responseType, function(error, data, metadata) {
        return callback(error, data, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.writeFile = function(path, data, options, callback) {
      var useForm;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      useForm = Dropbox.Xhr.canSendForms && typeof data === 'object';
      if (useForm) {
        return this.writeFileUsingForm(path, data, options, callback);
      } else {
        return this.writeFileUsingPut(path, data, options, callback);
      }
    };

    Client.prototype.writeFileUsingForm = function(path, data, options, callback) {
      var fileField, fileName, params, slashIndex, url;
      slashIndex = path.lastIndexOf('/');
      if (slashIndex === -1) {
        fileName = path;
        path = '';
      } else {
        fileName = path.substring(slashIndex);
        path = path.substring(0, slashIndex);
      }
      url = "" + this.urls.postFile + "/" + (this.urlEncodePath(path));
      params = {
        file: fileName
      };
      if (options) {
        if (options.noOverwrite) {
          params.overwrite = 'false';
        }
        if (options.lastVersionTag) {
          params.parent_rev = options.lastVersionTag;
        } else if (options.parentRev || options.parent_rev) {
          params.parent_rev = options.parentRev || options.parent_rev;
        }
      }
      this.oauth.addAuthParams('POST', url, params);
      delete params.file;
      fileField = {
        name: 'file',
        value: data,
        fileName: fileName,
        contentType: 'application/octet-stream'
      };
      return Dropbox.Xhr.multipartRequest(url, fileField, params, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.writeFileUsingPut = function(path, data, options, callback) {
      var params, url;
      url = "" + this.urls.putFile + "/" + (this.urlEncodePath(path));
      params = {};
      if (options) {
        if (options.noOverwrite) {
          params.overwrite = 'false';
        }
        if (options.lastVersionTag) {
          params.parent_rev = options.lastVersionTag;
        } else if (options.parentRev || options.parent_rev) {
          params.parent_rev = options.parentRev || options.parent_rev;
        }
      }
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request2('POST', url, params, null, data, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.stat = function(path, options, callback) {
      var params, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      url = "" + this.urls.metadata + "/" + (this.urlEncodePath(path));
      params = {};
      if (options) {
        if (options.version != null) {
          params.rev = options.version;
        }
        if (options.removed || options.deleted) {
          params.include_deleted = 'true';
        }
        if (options.readDir) {
          params.list = 'true';
          if (options.readDir !== true) {
            params.file_limit = options.readDir.toString();
          }
        }
        if (options.cacheHash) {
          params.hash = options.cacheHash;
        }
      }
      params.include_deleted || (params.include_deleted = 'false');
      params.list || (params.list = 'false');
      this.oauth.addAuthParams('GET', url, params);
      return Dropbox.Xhr.request('GET', url, params, null, function(error, metadata) {
        var entries, entry, stat;
        stat = Dropbox.Stat.parse(metadata);
        if (metadata != null ? metadata.contents : void 0) {
          entries = (function() {
            var _i, _len, _ref, _results;
            _ref = metadata.contents;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              entry = _ref[_i];
              _results.push(Dropbox.Stat.parse(entry));
            }
            return _results;
          })();
        } else {
          entries = void 0;
        }
        return callback(error, stat, entries);
      });
    };

    Client.prototype.readdir = function(path, options, callback) {
      var statOptions;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      statOptions = {
        readDir: true
      };
      if (options) {
        if (options.limit != null) {
          statOptions.readDir = options.limit;
        }
        if (options.versionTag) {
          statOptions.versionTag = options.versionTag;
        }
      }
      return this.stat(path, statOptions, function(error, stat, entry_stats) {
        var entries, entry_stat;
        if (entry_stats) {
          entries = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = entry_stats.length; _i < _len; _i++) {
              entry_stat = entry_stats[_i];
              _results.push(entry_stat.name);
            }
            return _results;
          })();
        } else {
          entries = null;
        }
        return callback(error, entries, stat, entry_stats);
      });
    };

    Client.prototype.metadata = function(path, options, callback) {
      return this.stat(path, options, callback);
    };

    Client.prototype.makeUrl = function(path, options, callback) {
      var isDirect, params, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      path = this.urlEncodePath(path);
      if (options && options.download) {
        isDirect = true;
        url = "" + this.urls.media + "/" + path;
      } else {
        isDirect = false;
        url = "" + this.urls.shares + "/" + path;
      }
      if (options && (options['long'] || options.longUrl)) {
        params = {
          short_url: 'false'
        };
      } else {
        params = {};
      }
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, urlData) {
        return callback(error, Dropbox.PublicUrl.parse(urlData, isDirect));
      });
    };

    Client.prototype.history = function(path, options, callback) {
      var params, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      url = "" + this.urls.revisions + "/" + (this.urlEncodePath(path));
      params = {};
      if (options && (options.limit != null)) {
        params.rev_limit = options.limit;
      }
      this.oauth.addAuthParams('GET', url, params);
      return Dropbox.Xhr.request('GET', url, params, null, function(error, versions) {
        var metadata, stats;
        if (versions) {
          stats = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = versions.length; _i < _len; _i++) {
              metadata = versions[_i];
              _results.push(Dropbox.Stat.parse(metadata));
            }
            return _results;
          })();
        } else {
          stats = void 0;
        }
        return callback(error, stats);
      });
    };

    Client.prototype.revisions = function(path, options, callback) {
      return this.history(path, options, callback);
    };

    Client.prototype.thumbnailUrl = function(path, options) {
      var params, url;
      url = "" + this.urls.thumbnails + "/" + (this.urlEncodePath(path));
      params = {};
      if (options) {
        if (options.format) {
          params.format = options.format;
        } else if (options.png) {
          params.format = 'png';
        }
        if (options.size) {
          params.size = options.size;
        }
      }
      this.oauth.addAuthParams('GET', url, params);
      return "" + url + "?" + (Dropbox.Xhr.urlEncode(params));
    };

    Client.prototype.readThumbnail = function(path, options, callback) {
      var responseType, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      url = this.thumbnailUrl(path, options);
      responseType = 'b';
      if (options) {
        if (options.blob) {
          responseType = 'blob';
        }
      }
      return Dropbox.Xhr.request2('GET', url, {}, null, null, responseType, function(error, data, metadata) {
        return callback(error, data, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.revertFile = function(path, versionTag, callback) {
      var params, url;
      url = "" + this.urls.restore + "/" + (this.urlEncodePath(path));
      params = {
        rev: versionTag
      };
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.restore = function(path, versionTag, callback) {
      return this.revertFile(path, versionTag, callback);
    };

    Client.prototype.findByName = function(path, namePattern, options, callback) {
      var params, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      url = "" + this.urls.search + "/" + (this.urlEncodePath(path));
      params = {
        query: namePattern
      };
      if (options) {
        if (options.limit != null) {
          params.file_limit = options.limit;
        }
        if (options.removed || options.deleted) {
          params.include_deleted = true;
        }
      }
      this.oauth.addAuthParams('GET', url, params);
      return Dropbox.Xhr.request('GET', url, params, null, function(error, results) {
        var metadata, stats;
        if (results) {
          stats = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              metadata = results[_i];
              _results.push(Dropbox.Stat.parse(metadata));
            }
            return _results;
          })();
        } else {
          stats = void 0;
        }
        return callback(error, stats);
      });
    };

    Client.prototype.search = function(path, namePattern, options, callback) {
      return this.findByName(path, namePattern, options, callback);
    };

    Client.prototype.makeCopyReference = function(path, callback) {
      var params, url;
      url = "" + this.urls.copyRef + "/" + (this.urlEncodePath(path));
      params = this.oauth.addAuthParams('GET', url, {});
      return Dropbox.Xhr.request('GET', url, params, null, function(error, refData) {
        return callback(error, Dropbox.CopyReference.parse(refData));
      });
    };

    Client.prototype.copyRef = function(path, callback) {
      return this.makeCopyReference(path, callback);
    };

    Client.prototype.pullChanges = function(cursor, callback) {
      var params, url;
      if ((!callback) && (typeof cursor === 'function')) {
        callback = cursor;
        cursor = null;
      }
      url = this.urls.delta;
      params = {};
      if (cursor) {
        if (cursor.cursorTag) {
          params = {
            cursor: cursor.cursorTag
          };
        } else {
          params = {
            cursor: cursor
          };
        }
      } else {
        params = {};
      }
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, deltaInfo) {
        return callback(error, Dropbox.PulledChanges.parse(deltaInfo));
      });
    };

    Client.prototype.delta = function(cursor, callback) {
      return this.pullChanges(cursor, callback);
    };

    Client.prototype.mkdir = function(path, callback) {
      var params, url;
      url = this.urls.fileopsCreateFolder;
      params = {
        root: this.fileRoot,
        path: this.normalizePath(path)
      };
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.remove = function(path, callback) {
      var params, url;
      url = this.urls.fileopsDelete;
      params = {
        root: this.fileRoot,
        path: this.normalizePath(path)
      };
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.unlink = function(path, callback) {
      return this.remove(path, callback);
    };

    Client.prototype["delete"] = function(path, callback) {
      return this.remove(path, callback);
    };

    Client.prototype.copy = function(from, toPath, callback) {
      var options, params, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      params = {
        root: this.fileRoot,
        to_path: this.normalizePath(toPath)
      };
      if (from instanceof Dropbox.CopyReference) {
        params.from_copy_ref = from.tag;
      } else {
        params.from_path = this.normalizePath(from);
      }
      url = this.urls.fileopsCopy;
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.move = function(fromPath, toPath, callback) {
      var options, params, url;
      if ((!callback) && (typeof options === 'function')) {
        callback = options;
        options = null;
      }
      fromPath = this.normalizePath(fromPath);
      toPath = this.normalizePath(toPath);
      url = this.urls.fileopsMove;
      params = {
        root: this.fileRoot,
        from_path: fromPath,
        to_path: toPath
      };
      this.oauth.addAuthParams('POST', url, params);
      return Dropbox.Xhr.request('POST', url, params, null, function(error, metadata) {
        return callback(error, Dropbox.Stat.parse(metadata));
      });
    };

    Client.prototype.reset = function() {
      this.uid = null;
      this.oauth.setToken(null, '');
      this.authState = DropboxClient.RESET;
      this.authError = null;
      this._credentials = null;
      return this;
    };

    Client.prototype.setCredentials = function(credentials) {
      this.oauth.reset(credentials);
      this.uid = credentials.uid || null;
      if (credentials.authState) {
        this.authState = credentials.authState;
      } else {
        if (credentials.token) {
          this.authState = DropboxClient.DONE;
        } else {
          this.authState = DropboxClient.RESET;
        }
      }
      this.authError = null;
      this._credentials = null;
      return this;
    };

    Client.prototype.appHash = function() {
      return this.oauth.appHash();
    };

    Client.prototype.setupUrls = function() {
      this.fileRoot = this.sandbox ? 'sandbox' : 'dropbox';
      return this.urls = {
        requestToken: "" + this.apiServer + "/1/oauth/request_token",
        authorize: "" + this.authServer + "/1/oauth/authorize",
        accessToken: "" + this.apiServer + "/1/oauth/access_token",
        signOut: "" + this.apiServer + "/1/unlink_access_token",
        accountInfo: "" + this.apiServer + "/1/account/info",
        getFile: "" + this.fileServer + "/1/files/" + this.fileRoot,
        postFile: "" + this.fileServer + "/1/files/" + this.fileRoot,
        putFile: "" + this.fileServer + "/1/files_put/" + this.fileRoot,
        metadata: "" + this.apiServer + "/1/metadata/" + this.fileRoot,
        delta: "" + this.apiServer + "/1/delta",
        revisions: "" + this.apiServer + "/1/revisions/" + this.fileRoot,
        restore: "" + this.apiServer + "/1/restore/" + this.fileRoot,
        search: "" + this.apiServer + "/1/search/" + this.fileRoot,
        shares: "" + this.apiServer + "/1/shares/" + this.fileRoot,
        media: "" + this.apiServer + "/1/media/" + this.fileRoot,
        copyRef: "" + this.apiServer + "/1/copy_ref/" + this.fileRoot,
        thumbnails: "" + this.fileServer + "/1/thumbnails/" + this.fileRoot,
        fileopsCopy: "" + this.apiServer + "/1/fileops/copy",
        fileopsCreateFolder: "" + this.apiServer + "/1/fileops/create_folder",
        fileopsDelete: "" + this.apiServer + "/1/fileops/delete",
        fileopsMove: "" + this.apiServer + "/1/fileops/move"
      };
    };

    Client.ERROR = 0;

    Client.RESET = 1;

    Client.REQUEST = 2;

    Client.AUTHORIZED = 3;

    Client.DONE = 4;

    Client.SIGNED_OFF = 5;

    Client.prototype.urlEncodePath = function(path) {
      return Dropbox.Xhr.urlEncodeValue(this.normalizePath(path)).replace(/%2F/gi, '/');
    };

    Client.prototype.normalizePath = function(path) {
      var i;
      if (path.substring(0, 1) === '/') {
        i = 1;
        while (path.substring(i, i + 1) === '/') {
          i += 1;
        }
        return path.substring(i);
      } else {
        return path;
      }
    };

    Client.prototype.requestToken = function(callback) {
      var params;
      params = this.oauth.addAuthParams('POST', this.urls.requestToken, {});
      return Dropbox.Xhr.request('POST', this.urls.requestToken, params, null, callback);
    };

    Client.prototype.authorizeUrl = function(token) {
      var params;
      params = {
        oauth_token: token,
        oauth_callback: this.driver.url()
      };
      return ("" + this.urls.authorize + "?") + Dropbox.Xhr.urlEncode(params);
    };

    Client.prototype.getAccessToken = function(callback) {
      var params;
      params = this.oauth.addAuthParams('POST', this.urls.accessToken, {});
      return Dropbox.Xhr.request('POST', this.urls.accessToken, params, null, callback);
    };

    Client.prototype.defaultApiServer = function() {
      return 'https://api.dropbox.com';
    };

    Client.prototype.defaultAuthServer = function() {
      return this.apiServer.replace('api.', 'www.');
    };

    Client.prototype.defaultFileServer = function() {
      return this.apiServer.replace('api.', 'api-content.');
    };

    Client.prototype.computeCredentials = function() {
      var value;
      value = {
        key: this.oauth.key,
        sandbox: this.sandbox
      };
      if (this.oauth.secret) {
        value.secret = this.oauth.secret;
      }
      if (this.oauth.token) {
        value.token = this.oauth.token;
        value.tokenSecret = this.oauth.tokenSecret;
      }
      if (this.uid) {
        value.uid = this.uid;
      }
      if (this.authState !== DropboxClient.ERROR && this.authState !== DropboxClient.RESET && this.authState !== DropboxClient.DONE && this.authState !== DropboxClient.SIGNED_OFF) {
        value.authState = this.authState;
      }
      if (this.apiServer !== this.defaultApiServer()) {
        value.server = this.apiServer;
      }
      if (this.authServer !== this.defaultAuthServer()) {
        value.authServer = this.authServer;
      }
      if (this.fileServer !== this.defaultFileServer()) {
        value.fileServer = this.fileServer;
      }
      return this._credentials = value;
    };

    return Client;

  })();

  DropboxClient = Dropbox.Client;

}).call(this);
