// Generated by CoffeeScript 1.6.3
module("GDrive");

test("Auto Login(15s)", function() {
  stop();
  Nimbus.Auth.set_app_ready(function() {
    start();
    return equal(Nimbus.Auth.authorized(), true, "have  been  login");
  });
});

asyncTest("Set Model and  Sync(15s)", 1, function() {
  window.Entry3 = Nimbus.Model.setup("Entry3", ["note", "comment"]);
  stop();
  setTimeout(function() {
    ok(Entry3, "Entry3  have been  setup");
    return Entry3.sync_all();
  }, 5000);
  return setTimeout(function() {
    QUnit.start();
    return QUnit.start();
  }, 15000);
});

test("clear old data(10s)", function() {
  stop();
  Entry3.destroyAll();
  return setTimeout(function() {
    var content, count, x, _i, _len, _ref;
    QUnit.start();
    count = 0;
    _ref = window.todo.keys();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      content = JSON.parse(window.todo.get(x));
      if (content.type === "Entry3") {
        count = count + 1;
      }
    }
    return QUnit.equal(Entry3.all().length, 0, "Entry3 is empty now");
  }, 10000);
});

asyncTest("add objects(8s)", 1, function() {
  stop();
  setTimeout(function() {
    Entry3.create({
      "note": "note1",
      "comment": "comment1"
    });
    Entry3.create({
      "note": "note2",
      "comment": "comment2"
    });
    Entry3.create({
      "note": "note3",
      "comment": "comment3"
    });
    Entry3.create({
      "note": "note4",
      "comment": "comment4"
    });
    return Entry3.create({
      "note": "note5",
      "comment": "comment5"
    });
  }, 2000);
  return setTimeout(function() {
    var content, count, x, _i, _len, _ref;
    QUnit.start();
    QUnit.start();
    count = 0;
    _ref = window.todo.keys();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      content = JSON.parse(window.todo.get(x));
      if (content.type === "Entry3") {
        count = count + 1;
      }
    }
    return QUnit.equal(Entry3.all().length, 5, "Entry3 has 5 objects");
  }, 8000);
});

asyncTest("delete objects(5s)", 2, function() {
  var a, a_id;
  stop();
  a = Entry3.findByAttribute("note", "note1");
  a_id = a.id;
  setTimeout(function() {
    var content, find, x, _i, _len, _ref;
    find = false;
    _ref = window.todo.keys();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      content = JSON.parse(window.todo.get(x));
      if (!content) {
        continue;
      }
    }
    if (content.id = a_id) {
      find = true;
    }
    QUnit.equal(find, true, "find the item in gdrive");
    return a.destroy();
  }, 2000);
  return setTimeout(function() {
    var find;
    find = window.todo.get(a_id) === null;
    QUnit.start();
    QUnit.start();
    return QUnit.equal(find, true, "the obejct have been deleted in gdrive");
  }, 5000);
});

asyncTest("Edit objects(10s)", 2, function() {
  var a, a_id;
  stop();
  a = Entry3.findByAttribute("note", "note2");
  a_id = a.id;
  setTimeout(function() {
    var content, find, x, _i, _len, _ref;
    find = false;
    _ref = window.todo.keys();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      content = JSON.parse(window.todo.get(x));
      if (!content) {
        continue;
      }
    }
    if (content.id = a_id) {
      find = true;
    }
    QUnit.equal(find, true, "find the object in gdrive");
    a.note = "note2222";
    return a.save();
  }, 2000);
  return setTimeout(function() {
    var ob;
    QUnit.start();
    QUnit.start();
    ob = JSON.parse(window.todo.get(a_id));
    QUnit.equal(ob.note, "note2222", "find the item have been  changed in gdrive");
    return Nimbus.Auth.logout();
  }, 6000);
});
